#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
run_notebooks.py ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ Jupyter-–Ω–æ—É—Ç–±—É–∫–æ–≤:
- –í—Å–µ –Ω–æ—É—Ç–±—É–∫–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö, –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.
- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –Ω–æ—É—Ç–±—É–∫–∞ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û (–µ—Å–ª–∏ –∏—Ö –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ ‚â•2).
- –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ ./executed —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º _executed.ipynb.

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: nbformat, nbconvert
–£—Å—Ç–∞–Ω–æ–≤–∫–∞: pip install nbformat nbconvert
"""

from __future__ import annotations
import sys
import time
from pathlib import Path
from concurrent.futures import ProcessPoolExecutor, as_completed

try:
    import nbformat
    from nbconvert.preprocessors import ExecutePreprocessor, CellExecutionError
except ImportError as e:
    sys.stderr.write(
        "–¢—Ä–µ–±—É—é—Ç—Å—è –ø–∞–∫–µ—Ç—ã nbformat –∏ nbconvert.\n"
        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install nbformat nbconvert\n"
    )
    raise

# === –£–ö–ê–ñ–ò–¢–ï –°–í–û–ò –ù–û–£–¢–ë–£–ö–ò –í –ù–£–ñ–ù–û–ú –ü–û–†–Ø–î–ö–ï ===
NOTEBOOKS = [
    "code/03a_train_test_split.ipynb",
    "code/03b_feature_extraction.ipynb",
    "code/03c_feature_engineering.ipynb",
    "code/04a_modeling_lr.ipynb",
    "code/04b_modeling_lr.ipynb"
]

# === –ù–ê–°–¢–†–û–ô–ö–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===
KERNEL_NAME = "python3"   # –∏–º—è —è–¥—Ä–∞ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ)
TIMEOUT_SEC = 3600        # —Ç–∞–π–º–∞—É—Ç –Ω–∞ –Ω–æ—É—Ç–±—É–∫; 0 ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
ALLOW_ERRORS = False      # False => –ø–∞–¥–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
OUT_DIRNAME = "executed"  # –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–æ—É—Ç–±—É–∫–∏

def run_notebook(nb_path: Path, out_dir: Path) -> Path:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–æ—É—Ç–±—É–∫ nb_path –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∫–æ–ø–∏—é –≤ out_dir.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
    """
    if not nb_path.exists():
        raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–æ—É—Ç–±—É–∫: {nb_path}")

    print(f"\n=== –ó–∞–ø—É—Å–∫: {nb_path} ===")
    with nb_path.open("r", encoding="utf-8") as f:
        nb = nbformat.read(f, as_version=4)

    # –í–∞–∂–Ω–æ: —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ‚Äî –ø–∞–ø–∫–∞ –Ω–æ—É—Ç–±—É–∫–∞ (–¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π)
    resources = {"metadata": {"path": str(nb_path.parent)}}

    ep = ExecutePreprocessor(
        timeout=TIMEOUT_SEC,
        kernel_name=KERNEL_NAME,
        allow_errors=ALLOW_ERRORS,
    )

    t0 = time.time()
    try:
        ep.preprocess(nb, resources=resources)
    except CellExecutionError as exc:
        out_dir.mkdir(parents=True, exist_ok=True)
        failed_path = out_dir / f"{nb_path.stem}_FAILED.ipynb"
        with failed_path.open("w", encoding="utf-8") as f:
            nbformat.write(nb, f)
        print(f"‚ùå –û—à–∏–±–∫–∞: {nb_path}\n–ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –Ω–æ—É—Ç–±—É–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {failed_path}")
        raise

    elapsed = time.time() - t0
    out_dir.mkdir(parents=True, exist_ok=True)
    out_path = out_dir / f"{nb_path.stem}_executed.ipynb"
    with out_path.open("w", encoding="utf-8") as f:
        nbformat.write(nb, f)

    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {out_path} (–≤—Ä–µ–º—è: {elapsed:.1f} —Å)")
    return out_path

def main():
    if not NOTEBOOKS:
        print("–°–ø–∏—Å–æ–∫ NOTEBOOKS –ø—É—Å—Ç ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –ø—É—Ç–∏ –∫ .ipynb.")
        sys.exit(2)

    base_dir = Path.cwd()
    out_dir = base_dir / OUT_DIRNAME

    # –†–∞–∑–¥–µ–ª—è–µ–º: –≤—Å—ë –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ; –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ ‚Äî –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    seq_part = NOTEBOOKS[:-2] if len(NOTEBOOKS) >= 3 else NOTEBOOKS[:-2]  # –±—É–¥–µ—Ç [] –µ—Å–ª–∏ <3
    par_part = NOTEBOOKS[-2:] if len(NOTEBOOKS) >= 2 else NOTEBOOKS[-2:]  # –≤–æ–∑—å–º–µ—Ç 1 –∏–ª–∏ 2

    started = time.time()

    # 1) –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    for nb in seq_part:
        nb_path = (base_dir / nb).resolve() if not Path(nb).is_absolute() else Path(nb)
        try:
            run_notebook(nb_path, out_dir)
        except Exception as e:
            print(f"\n‚õî –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {nb_path}\n{e}")
            sys.exit(1)

    # 2) –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–≤—É—Ö (–∏–ª–∏ –æ–¥–Ω–æ–≥–æ, –µ—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ–≥–æ 1‚Äì2)
    if par_part:
        print("\n=== –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ—É—Ç–±—É–∫–æ–≤ ===")
        futures = {}
        with ProcessPoolExecutor(max_workers=min(2, len(par_part))) as ex:
            for nb in par_part:
                nb_path = (base_dir / nb).resolve() if not Path(nb).is_absolute() else Path(nb)
                futures[ex.submit(run_notebook, nb_path, out_dir)] = nb_path

            had_error = False
            for fut in as_completed(futures):
                nb_path = futures[fut]
                try:
                    fut.result()
                except Exception as e:
                    print(f"\n‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {nb_path}\n{e}")
                    had_error = True
        if had_error and not ALLOW_ERRORS:
            sys.exit(1)

    total = time.time() - started
    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ. –ò—Ç–æ–≥–æ–≤–æ–µ –≤—Ä–µ–º—è: {total:.1f} —Å\n–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–æ—É—Ç–±—É–∫–∏: {out_dir}")

if __name__ == "__main__":
    main()
